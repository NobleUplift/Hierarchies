import sys
import importlib
import traceback
import discord
from discord.ext import commands
import os.path
from os import path
from pathlib import Path
import json
from discord_token import token

from cogs.HierarchiesUtilities import Core

class CustomManagement(commands.Cog):
    """Commands for custom commands."""
    _instance = None

    def __new__(cls, bot):
        if cls._instance is None:
            cls._instance = super(CustomManagement, cls).__new__(cls)
            # Put any initialization here.
        return cls._instance

    def __init__(self, bot):
        self.bot = bot
        self._last_member = None

    async def promote_hooks(self, ctx: discord.ext.commands.Context, Member: discord.Member, Tier: discord.Role, NewTier: discord.Role, HierarchyName: str, role_change_function: callable):
        return await role_change_function(Member, Tier, NewTier)

    async def demote_hooks(self, ctx: discord.ext.commands.Context, Member: discord.Member, Tier: discord.Role, NewTier: discord.Role, HierarchyName: str, role_change_function: callable):
        return await role_change_function(Member, Tier, NewTier)

    async def assign_hooks(self, ctx: discord.ext.commands.Context, Member: discord.Member, Tier: discord.Role, NewTier: discord.Role, HierarchyName: str, role_change_function: callable):
        return await role_change_function(Member, Tier, NewTier)

    async def unassign_hooks(self, ctx: discord.ext.commands.Context, Member: discord.Member, Tier: discord.Role, NewTier: discord.Role, HierarchyName: str, role_change_function: callable):
        return await role_change_function(Member, Tier, NewTier)
